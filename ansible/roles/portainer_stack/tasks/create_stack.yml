---
- name: "{{ stack_name }} Authenticate with Portainer API"
  uri:
    url: "{{ portainer_host }}/api/auth"
    method: POST
    headers:
      Content-Type: "application/json"
    body_format: json
    body:
      username: "{{ admin_user }}"
      password: "{{ admin_password }}"
  register: auth_response
  changed_when: false
  ignore_errors: true

- name: "{{ stack_name }} Check authentication response"
  fail:
    msg: "Failed to authenticate with Portainer API"
  when: "auth_response.status != 200"

- name: "{{ stack_name }} Get JWT token from authentication response"
  set_fact:
    jwt_token: "{{ auth_response.json.jwt }}"
  when: auth_response.status == 200

- name: "{{ stack_name }} Get stack information from Portainer"
  uri:
    url: "{{ portainer_host }}/api/stacks"
    method: GET
    headers:
      Authorization: "Bearer {{ jwt_token }}"
  register: get_stack_response
  when: jwt_token is defined

- name: "{{ stack_name }} Check if the stack exists"
  set_fact:
    stack_not_exists: "{{ get_stack_response.json | json_query('[?Name == `'+ stack_name +'`]') | length <= 0 }}"
  # vars:
  #   response_data: "{{ get_stack_response.json }}"

- name: "{{ stack_name }} Getting stack ID"
  set_fact:
    stack_infos: "{{ get_stack_response.json | json_query('[?Name == `'+ stack_name +'`]') | first }}"
  when: stack_not_exists == false

- name: "{{ stack_name }} Parse .env file content in stack_env into env list"
  set_fact:
    stack_env_list: >-
      {{
        stack_env.splitlines()
        | map('trim')
        | select('match', '^[A-Za-z_][A-Za-z0-9_]*=')
        | reject('match', '^\\s*#')
        | reject('equalto', '')
        | list
      }}
  when: stack_env is defined and stack_env != ""

- name: "{{ stack_name }} Initialize empty env list"
  set_fact:
    stack_env_kv_list: []
  when: stack_env_list is defined

# TODO: Empty env var when spinoff new stack

- name: "{{ stack_name }} Set default stack_env_kv_list"
  set_fact:
    stack_env_kv_list: []

- name: "{{ stack_name }} Convert env list to key-value dicts"
  set_fact:
    stack_env_kv_list: "{{ stack_env_kv_list + [{'name': item.split('=', 1)[0], 'value': item.split('=', 1)[1]}] }}"
  loop: "{{ stack_env_list }}"
  when: stack_env_list is defined

- name: "{{ stack_name }} Create a stack in Portainer"
  uri:
    url: "{{ portainer_host }}/api/stacks/create/standalone/string?endpointId={{ endpoint_id }}"
    method: POST
    timeout: 120
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ jwt_token }}"
    body_format: json
    body:
      name: "{{ stack_name }}"
      fromAppTemplate: false
      StackFileContent: "{{ stack_compose }}"
      env: "{{ stack_env_kv_list }}"
  register: create_stack_response
  when: jwt_token is defined and stack_not_exists

- name: "{{ stack_name }} [{{ stack_infos.Id }}] Check stack creation response"
  fail:
    msg: "Failed to create stack in Portainer"
  when: stack_not_exists and create_stack_response.status != 200

- name: "{{ stack_name }} [{{ stack_infos.Id }}] Update a stack in Portainer"
  uri:
    url: "{{ portainer_host }}/api/stacks/{{ stack_infos.Id }}?endpointId={{endpoint_id}}"
    method: PUT
    timeout: 120
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ jwt_token }}"
    body_format: json
    body:
      name: "{{ stack_name }}"
      prune: true
      fromAppTemplate: false
      StackFileContent: "{{ stack_compose }}"
      env: "{{ stack_env_kv_list }}"
  register: update_stack_response
  when: jwt_token is defined and stack_not_exists == False

- name: "{{ stack_name }} [{{ stack_infos.Id }}] Check stack update response"
  fail:
    msg: "Failed to update stack in Portainer"
  when: stack_not_exists == False and update_stack_response.status != 200
